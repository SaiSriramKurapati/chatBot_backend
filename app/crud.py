import os
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'app')))
from sqlalchemy.orm import Session
import models as models  # Importing the models module which contains the database models
import schemas as schemas  # Importing the schemas module which defines the data validation and serialization schemas

# === Creates a New Message in the Database ===
# This function creates a new message entry in the database.
# - db: The database session used for performing the database operations.
# - message: The incoming message data validated against the MessageCreate schema.
# - response: The response generated by the OpenAI model.
# Returns the newly created message object after saving it to the database.

def create_message(db: Session, message: schemas.MessageCreate, response: str):
    # Instantiates a new Message model object with the provided content and response.
    db_message = models.Message(content=message.content, response=response)

    # Adds the new message to the database session.
    db.add(db_message)

    # Commits the transaction to save the message to the database.
    db.commit()

    # Refreshes the session to load the latest state of the message from the database.
    db.refresh(db_message)

    # Returns the saved message object.
    return db_message

# === Retrieves a Single Message by ID ===
# This function retrieves a single message from the database based on its ID.
# - db: The database session used for performing the database operations.
# - message_id: The ID of the message to retrieve.
# Returns the message object if found, otherwise returns None.

def get_message(db: Session, message_id: int):
    # Queries the database for a message with the specified ID and returns the first match.
    return db.query(models.Message).filter(models.Message.id == message_id).first()

# === Retrieves Multiple Messages with Pagination ===
# This function retrieves a list of messages from the database with optional pagination.
# - db: The database session used for performing the database operations.
# - skip: The number of records to skip before returning the results (used for pagination).
# - limit: The maximum number of records to return (used for pagination).
# Returns a list of message objects.

def get_messages(db: Session, skip: int = 0, limit: int = 10):
    # Queries the database for messages, applies the offset and limit for pagination, and returns the results.
    return db.query(models.Message).offset(skip).limit(limit).all()

# === Updates an Existing Message by ID ===
# This function updates the content and response of an existing message in the database.
# - db: The database session used for performing the database operations.
# - message_id: The ID of the message to update.
# - new_content: The new content for the message.
# - new_response: The new response to associate with the message.
# Returns the updated message object if the message was found and updated, otherwise returns None.

def update_message(db: Session, message_id: int, new_content: str, new_response: str):
    # Queries the database for the message with the specified ID.
    message = db.query(models.Message).filter(models.Message.id == message_id).first()
    if message:
        # Updates the message's content and response with the new values.
        message.content = new_content
        message.response = new_response

        # Commits the transaction to save the changes to the database.
        db.commit()

        # Refreshes the session to load the latest state of the message from the database.
        db.refresh(message)

    # Returns the updated message object, or None if the message was not found.
    return message

# === Deletes a Message by ID ===
# This function deletes a message from the database based on its ID.
# - db: The database session used for performing the database operations.
# - message_id: The ID of the message to delete.
# Returns the deleted message object if the message was found and deleted, otherwise returns None.
def delete_message(db: Session, message_id: int):
    # Queries the database for the message with the specified ID.
    message = db.query(models.Message).filter(models.Message.id == message_id).first()
    if message:
        # Deletes the message from the database.
        db.delete(message)

        # Commits the transaction to save the changes to the database.
        db.commit()

    # Returns the deleted message object, or None if the message was not found.
    return message
